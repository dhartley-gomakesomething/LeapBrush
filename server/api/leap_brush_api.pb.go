// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: leap_brush_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatteryStatusProto_BatteryState int32

const (
	BatteryStatusProto_UNKNOWN      BatteryStatusProto_BatteryState = 0
	BatteryStatusProto_CHARGING     BatteryStatusProto_BatteryState = 1
	BatteryStatusProto_DISCHARGING  BatteryStatusProto_BatteryState = 2
	BatteryStatusProto_NOT_CHARGING BatteryStatusProto_BatteryState = 3
	BatteryStatusProto_FULL         BatteryStatusProto_BatteryState = 4
)

// Enum value maps for BatteryStatusProto_BatteryState.
var (
	BatteryStatusProto_BatteryState_name = map[int32]string{
		0: "UNKNOWN",
		1: "CHARGING",
		2: "DISCHARGING",
		3: "NOT_CHARGING",
		4: "FULL",
	}
	BatteryStatusProto_BatteryState_value = map[string]int32{
		"UNKNOWN":      0,
		"CHARGING":     1,
		"DISCHARGING":  2,
		"NOT_CHARGING": 3,
		"FULL":         4,
	}
)

func (x BatteryStatusProto_BatteryState) Enum() *BatteryStatusProto_BatteryState {
	p := new(BatteryStatusProto_BatteryState)
	*p = x
	return p
}

func (x BatteryStatusProto_BatteryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryStatusProto_BatteryState) Descriptor() protoreflect.EnumDescriptor {
	return file_leap_brush_api_proto_enumTypes[0].Descriptor()
}

func (BatteryStatusProto_BatteryState) Type() protoreflect.EnumType {
	return &file_leap_brush_api_proto_enumTypes[0]
}

func (x BatteryStatusProto_BatteryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryStatusProto_BatteryState.Descriptor instead.
func (BatteryStatusProto_BatteryState) EnumDescriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{4, 0}
}

type UserStateProto_ToolState int32

const (
	UserStateProto_MENU           UserStateProto_ToolState = 0
	UserStateProto_LASER          UserStateProto_ToolState = 1
	UserStateProto_ERASER         UserStateProto_ToolState = 2
	UserStateProto_BRUSH_SCRIBBLE UserStateProto_ToolState = 3
	UserStateProto_BRUSH_POLY     UserStateProto_ToolState = 4
)

// Enum value maps for UserStateProto_ToolState.
var (
	UserStateProto_ToolState_name = map[int32]string{
		0: "MENU",
		1: "LASER",
		2: "ERASER",
		3: "BRUSH_SCRIBBLE",
		4: "BRUSH_POLY",
	}
	UserStateProto_ToolState_value = map[string]int32{
		"MENU":           0,
		"LASER":          1,
		"ERASER":         2,
		"BRUSH_SCRIBBLE": 3,
		"BRUSH_POLY":     4,
	}
)

func (x UserStateProto_ToolState) Enum() *UserStateProto_ToolState {
	p := new(UserStateProto_ToolState)
	*p = x
	return p
}

func (x UserStateProto_ToolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStateProto_ToolState) Descriptor() protoreflect.EnumDescriptor {
	return file_leap_brush_api_proto_enumTypes[1].Descriptor()
}

func (UserStateProto_ToolState) Type() protoreflect.EnumType {
	return &file_leap_brush_api_proto_enumTypes[1]
}

func (x UserStateProto_ToolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStateProto_ToolState.Descriptor instead.
func (UserStateProto_ToolState) EnumDescriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{7, 0}
}

type UserStateProto_DeviceType int32

const (
	UserStateProto_DESKTOP_SPECTATOR UserStateProto_DeviceType = 0
	UserStateProto_MAGIC_LEAP        UserStateProto_DeviceType = 1
)

// Enum value maps for UserStateProto_DeviceType.
var (
	UserStateProto_DeviceType_name = map[int32]string{
		0: "DESKTOP_SPECTATOR",
		1: "MAGIC_LEAP",
	}
	UserStateProto_DeviceType_value = map[string]int32{
		"DESKTOP_SPECTATOR": 0,
		"MAGIC_LEAP":        1,
	}
)

func (x UserStateProto_DeviceType) Enum() *UserStateProto_DeviceType {
	p := new(UserStateProto_DeviceType)
	*p = x
	return p
}

func (x UserStateProto_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStateProto_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_leap_brush_api_proto_enumTypes[2].Descriptor()
}

func (UserStateProto_DeviceType) Type() protoreflect.EnumType {
	return &file_leap_brush_api_proto_enumTypes[2]
}

func (x UserStateProto_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStateProto_DeviceType.Descriptor instead.
func (UserStateProto_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{7, 1}
}

type SpaceInfoProto_MappingMode int32

const (
	SpaceInfoProto_ON_DEVICE SpaceInfoProto_MappingMode = 0
	SpaceInfoProto_AR_CLOUD  SpaceInfoProto_MappingMode = 1
)

// Enum value maps for SpaceInfoProto_MappingMode.
var (
	SpaceInfoProto_MappingMode_name = map[int32]string{
		0: "ON_DEVICE",
		1: "AR_CLOUD",
	}
	SpaceInfoProto_MappingMode_value = map[string]int32{
		"ON_DEVICE": 0,
		"AR_CLOUD":  1,
	}
)

func (x SpaceInfoProto_MappingMode) Enum() *SpaceInfoProto_MappingMode {
	p := new(SpaceInfoProto_MappingMode)
	*p = x
	return p
}

func (x SpaceInfoProto_MappingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceInfoProto_MappingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_leap_brush_api_proto_enumTypes[3].Descriptor()
}

func (SpaceInfoProto_MappingMode) Type() protoreflect.EnumType {
	return &file_leap_brush_api_proto_enumTypes[3]
}

func (x SpaceInfoProto_MappingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceInfoProto_MappingMode.Descriptor instead.
func (SpaceInfoProto_MappingMode) EnumDescriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{9, 0}
}

type BrushStrokeProto_BrushType int32

const (
	BrushStrokeProto_SCRIBBLE BrushStrokeProto_BrushType = 0
	BrushStrokeProto_POLY     BrushStrokeProto_BrushType = 1
)

// Enum value maps for BrushStrokeProto_BrushType.
var (
	BrushStrokeProto_BrushType_name = map[int32]string{
		0: "SCRIBBLE",
		1: "POLY",
	}
	BrushStrokeProto_BrushType_value = map[string]int32{
		"SCRIBBLE": 0,
		"POLY":     1,
	}
)

func (x BrushStrokeProto_BrushType) Enum() *BrushStrokeProto_BrushType {
	p := new(BrushStrokeProto_BrushType)
	*p = x
	return p
}

func (x BrushStrokeProto_BrushType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrushStrokeProto_BrushType) Descriptor() protoreflect.EnumDescriptor {
	return file_leap_brush_api_proto_enumTypes[4].Descriptor()
}

func (BrushStrokeProto_BrushType) Type() protoreflect.EnumType {
	return &file_leap_brush_api_proto_enumTypes[4]
}

func (x BrushStrokeProto_BrushType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrushStrokeProto_BrushType.Descriptor instead.
func (BrushStrokeProto_BrushType) EnumDescriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{10, 0}
}

type Vector3Proto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector3Proto) Reset() {
	*x = Vector3Proto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector3Proto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3Proto) ProtoMessage() {}

func (x *Vector3Proto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3Proto.ProtoReflect.Descriptor instead.
func (*Vector3Proto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{0}
}

func (x *Vector3Proto) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3Proto) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3Proto) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type QuaternionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W float32 `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *QuaternionProto) Reset() {
	*x = QuaternionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuaternionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuaternionProto) ProtoMessage() {}

func (x *QuaternionProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuaternionProto.ProtoReflect.Descriptor instead.
func (*QuaternionProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{1}
}

func (x *QuaternionProto) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *QuaternionProto) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *QuaternionProto) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *QuaternionProto) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

type PoseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Vector3Proto    `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Rotation *QuaternionProto `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *PoseProto) Reset() {
	*x = PoseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoseProto) ProtoMessage() {}

func (x *PoseProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoseProto.ProtoReflect.Descriptor instead.
func (*PoseProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{2}
}

func (x *PoseProto) GetPosition() *Vector3Proto {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PoseProto) GetRotation() *QuaternionProto {
	if x != nil {
		return x.Rotation
	}
	return nil
}

type TransformProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Vector3Proto    `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Rotation *QuaternionProto `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Scale    *Vector3Proto    `protobuf:"bytes,3,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *TransformProto) Reset() {
	*x = TransformProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformProto) ProtoMessage() {}

func (x *TransformProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformProto.ProtoReflect.Descriptor instead.
func (*TransformProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{3}
}

func (x *TransformProto) GetPosition() *Vector3Proto {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TransformProto) GetRotation() *QuaternionProto {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *TransformProto) GetScale() *Vector3Proto {
	if x != nil {
		return x.Scale
	}
	return nil
}

type BatteryStatusProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Battery level between 0 and 100.
	Level uint32                          `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	State BatteryStatusProto_BatteryState `protobuf:"varint,2,opt,name=state,proto3,enum=leapbrush.BatteryStatusProto_BatteryState" json:"state,omitempty"`
}

func (x *BatteryStatusProto) Reset() {
	*x = BatteryStatusProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryStatusProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStatusProto) ProtoMessage() {}

func (x *BatteryStatusProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStatusProto.ProtoReflect.Descriptor instead.
func (*BatteryStatusProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{4}
}

func (x *BatteryStatusProto) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BatteryStatusProto) GetState() BatteryStatusProto_BatteryState {
	if x != nil {
		return x.State
	}
	return BatteryStatusProto_UNKNOWN
}

type ControllerStateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pose for the user's Controller relative to the closest spatial anchor
	Pose *PoseProto `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
	// Z offset of the tool attached to this Controller.
	ToolOffsetZ float32 `protobuf:"fixed32,2,opt,name=tool_offset_z,json=toolOffsetZ,proto3" json:"tool_offset_z,omitempty"`
	// The laser ray points for the laser pointer if active
	RayPoints []*Vector3Proto `protobuf:"bytes,3,rep,name=ray_points,json=rayPoints,proto3" json:"ray_points,omitempty"`
	// The current selection progress for the controller (trigger button).
	SelectProgress float32 `protobuf:"fixed32,4,opt,name=select_progress,json=selectProgress,proto3" json:"select_progress,omitempty"`
}

func (x *ControllerStateProto) Reset() {
	*x = ControllerStateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerStateProto) ProtoMessage() {}

func (x *ControllerStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerStateProto.ProtoReflect.Descriptor instead.
func (*ControllerStateProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{5}
}

func (x *ControllerStateProto) GetPose() *PoseProto {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *ControllerStateProto) GetToolOffsetZ() float32 {
	if x != nil {
		return x.ToolOffsetZ
	}
	return 0
}

func (x *ControllerStateProto) GetRayPoints() []*Vector3Proto {
	if x != nil {
		return x.RayPoints
	}
	return nil
}

func (x *ControllerStateProto) GetSelectProgress() float32 {
	if x != nil {
		return x.SelectProgress
	}
	return 0
}

type HandStateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pose of the tool attached to this hand, relative to the closest spatial anchor.
	ToolPose *PoseProto `protobuf:"bytes,1,opt,name=tool_pose,json=toolPose,proto3" json:"tool_pose,omitempty"`
	// The laser ray points for the laser pointer if active
	RayPoints []*Vector3Proto `protobuf:"bytes,2,rep,name=ray_points,json=rayPoints,proto3" json:"ray_points,omitempty"`
	// The current selection progress for the hand (pinch degree, etc)
	SelectProgress float32 `protobuf:"fixed32,3,opt,name=select_progress,json=selectProgress,proto3" json:"select_progress,omitempty"`
}

func (x *HandStateProto) Reset() {
	*x = HandStateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandStateProto) ProtoMessage() {}

func (x *HandStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandStateProto.ProtoReflect.Descriptor instead.
func (*HandStateProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{6}
}

func (x *HandStateProto) GetToolPose() *PoseProto {
	if x != nil {
		return x.ToolPose
	}
	return nil
}

func (x *HandStateProto) GetRayPoints() []*Vector3Proto {
	if x != nil {
		return x.RayPoints
	}
	return nil
}

func (x *HandStateProto) GetSelectProgress() float32 {
	if x != nil {
		return x.SelectProgress
	}
	return 0
}

type UserStateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User identifier
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Anchor id for the spatial anchor closest to the user
	AnchorId string `protobuf:"bytes,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
	// Pose for the user's Headset relative to the closest spatial anchor
	HeadPose *PoseProto `protobuf:"bytes,5,opt,name=head_pose,json=headPose,proto3" json:"head_pose,omitempty"`
	// State of the user's Controller if active
	ControllerState *ControllerStateProto `protobuf:"bytes,13,opt,name=controller_state,json=controllerState,proto3,oneof" json:"controller_state,omitempty"`
	// State of the user's left hand if active
	LeftHandState *HandStateProto `protobuf:"bytes,14,opt,name=left_hand_state,json=leftHandState,proto3,oneof" json:"left_hand_state,omitempty"`
	// State of the user's right hand if active
	RightHandState *HandStateProto `protobuf:"bytes,15,opt,name=right_hand_state,json=rightHandState,proto3,oneof" json:"right_hand_state,omitempty"`
	// Current tool being used by the user
	ToolState UserStateProto_ToolState `protobuf:"varint,7,opt,name=tool_state,json=toolState,proto3,enum=leapbrush.UserStateProto_ToolState" json:"tool_state,omitempty"`
	// The color of the tool in use
	ToolColorRgb uint32 `protobuf:"varint,8,opt,name=tool_color_rgb,json=toolColorRgb,proto3" json:"tool_color_rgb,omitempty"`
	// The user's display name
	UserDisplayName string `protobuf:"bytes,10,opt,name=user_display_name,json=userDisplayName,proto3" json:"user_display_name,omitempty"`
	// The type of device that this client is running on
	DeviceType *UserStateProto_DeviceType `protobuf:"varint,11,opt,name=device_type,json=deviceType,proto3,enum=leapbrush.UserStateProto_DeviceType,oneof" json:"device_type,omitempty"`
	// The status of the headset or companion computer's battery
	HeadsetBattery *BatteryStatusProto `protobuf:"bytes,12,opt,name=headset_battery,json=headsetBattery,proto3,oneof" json:"headset_battery,omitempty"`
}

func (x *UserStateProto) Reset() {
	*x = UserStateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateProto) ProtoMessage() {}

func (x *UserStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateProto.ProtoReflect.Descriptor instead.
func (*UserStateProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{7}
}

func (x *UserStateProto) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserStateProto) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

func (x *UserStateProto) GetHeadPose() *PoseProto {
	if x != nil {
		return x.HeadPose
	}
	return nil
}

func (x *UserStateProto) GetControllerState() *ControllerStateProto {
	if x != nil {
		return x.ControllerState
	}
	return nil
}

func (x *UserStateProto) GetLeftHandState() *HandStateProto {
	if x != nil {
		return x.LeftHandState
	}
	return nil
}

func (x *UserStateProto) GetRightHandState() *HandStateProto {
	if x != nil {
		return x.RightHandState
	}
	return nil
}

func (x *UserStateProto) GetToolState() UserStateProto_ToolState {
	if x != nil {
		return x.ToolState
	}
	return UserStateProto_MENU
}

func (x *UserStateProto) GetToolColorRgb() uint32 {
	if x != nil {
		return x.ToolColorRgb
	}
	return 0
}

func (x *UserStateProto) GetUserDisplayName() string {
	if x != nil {
		return x.UserDisplayName
	}
	return ""
}

func (x *UserStateProto) GetDeviceType() UserStateProto_DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return UserStateProto_DESKTOP_SPECTATOR
}

func (x *UserStateProto) GetHeadsetBattery() *BatteryStatusProto {
	if x != nil {
		return x.HeadsetBattery
	}
	return nil
}

// AnchorProto contains an anchor's id and metadata
type AnchorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pose *PoseProto `protobuf:"bytes,2,opt,name=pose,proto3" json:"pose,omitempty"`
}

func (x *AnchorProto) Reset() {
	*x = AnchorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorProto) ProtoMessage() {}

func (x *AnchorProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorProto.ProtoReflect.Descriptor instead.
func (*AnchorProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{8}
}

func (x *AnchorProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnchorProto) GetPose() *PoseProto {
	if x != nil {
		return x.Pose
	}
	return nil
}

// SpaceInfoProto contains information about the space that the user is localized to
type SpaceInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of anchors currently found by the user.
	Anchor []*AnchorProto `protobuf:"bytes,3,rep,name=anchor,proto3" json:"anchor,omitempty"`
	// The pose of the space origin for the space localized to by the user. The RGB mesh from ARCloud uses this origin.
	TargetSpaceOrigin *PoseProto `protobuf:"bytes,4,opt,name=target_space_origin,json=targetSpaceOrigin,proto3" json:"target_space_origin,omitempty"`
	// The name of the space
	SpaceName string `protobuf:"bytes,5,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// The identifier of the space
	SpaceId string `protobuf:"bytes,6,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// The current mapping mode: ARCloud or OnDevice
	MappingMode SpaceInfoProto_MappingMode `protobuf:"varint,7,opt,name=mapping_mode,json=mappingMode,proto3,enum=leapbrush.SpaceInfoProto_MappingMode" json:"mapping_mode,omitempty"`
	// Whether the client is using imported anchors vs. real found spatial anchors. In the case of imported anchors,
	// the uses is remotely joining another session.
	UsingImportedAnchors bool `protobuf:"varint,8,opt,name=using_imported_anchors,json=usingImportedAnchors,proto3" json:"using_imported_anchors,omitempty"`
}

func (x *SpaceInfoProto) Reset() {
	*x = SpaceInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceInfoProto) ProtoMessage() {}

func (x *SpaceInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceInfoProto.ProtoReflect.Descriptor instead.
func (*SpaceInfoProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{9}
}

func (x *SpaceInfoProto) GetAnchor() []*AnchorProto {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *SpaceInfoProto) GetTargetSpaceOrigin() *PoseProto {
	if x != nil {
		return x.TargetSpaceOrigin
	}
	return nil
}

func (x *SpaceInfoProto) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *SpaceInfoProto) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *SpaceInfoProto) GetMappingMode() SpaceInfoProto_MappingMode {
	if x != nil {
		return x.MappingMode
	}
	return SpaceInfoProto_ON_DEVICE
}

func (x *SpaceInfoProto) GetUsingImportedAnchors() bool {
	if x != nil {
		return x.UsingImportedAnchors
	}
	return false
}

// BrushStrokeProto contains data for a brush stroke, consisting of metadata and a list of pose transforms for
// the points that make up the brush stroke
type BrushStrokeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for this brush stroke instance
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user identifier for the creator of this brush stroke
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The identifier for the spatial anchor closest to this brush stroke when it was created
	AnchorId string `protobuf:"bytes,3,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
	// The type of brush stroke
	Type BrushStrokeProto_BrushType `protobuf:"varint,7,opt,name=type,proto3,enum=leapbrush.BrushStrokeProto_BrushType" json:"type,omitempty"`
	// A list of poses that make up the points of this brush stroke (or the poses being modified as part of an
	// incremental update).
	BrushPose []*PoseProto `protobuf:"bytes,4,rep,name=brush_pose,json=brushPose,proto3" json:"brush_pose,omitempty"`
	// The start index for the current brush pose list, in the case of incremental updates to an existing brush stroke
	StartIndex int32 `protobuf:"varint,5,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// The color of the brush stroke (optional for incremental updates)
	StrokeColorRgb uint32 `protobuf:"varint,6,opt,name=stroke_color_rgb,json=strokeColorRgb,proto3" json:"stroke_color_rgb,omitempty"`
	// The fill color of the brush stroke (optional for incremental updates)
	FillColorRgba uint32 `protobuf:"varint,8,opt,name=fill_color_rgba,json=fillColorRgba,proto3" json:"fill_color_rgba,omitempty"`
	// The alpha value between 0 and 255 for the segmented dimmer fill of this brush stroke (optional for incremental
	// updates)
	FillDimmerA uint32 `protobuf:"varint,9,opt,name=fill_dimmer_a,json=fillDimmerA,proto3" json:"fill_dimmer_a,omitempty"`
}

func (x *BrushStrokeProto) Reset() {
	*x = BrushStrokeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrushStrokeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrushStrokeProto) ProtoMessage() {}

func (x *BrushStrokeProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrushStrokeProto.ProtoReflect.Descriptor instead.
func (*BrushStrokeProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{10}
}

func (x *BrushStrokeProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BrushStrokeProto) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BrushStrokeProto) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

func (x *BrushStrokeProto) GetType() BrushStrokeProto_BrushType {
	if x != nil {
		return x.Type
	}
	return BrushStrokeProto_SCRIBBLE
}

func (x *BrushStrokeProto) GetBrushPose() []*PoseProto {
	if x != nil {
		return x.BrushPose
	}
	return nil
}

func (x *BrushStrokeProto) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *BrushStrokeProto) GetStrokeColorRgb() uint32 {
	if x != nil {
		return x.StrokeColorRgb
	}
	return 0
}

func (x *BrushStrokeProto) GetFillColorRgba() uint32 {
	if x != nil {
		return x.FillColorRgba
	}
	return 0
}

func (x *BrushStrokeProto) GetFillDimmerA() uint32 {
	if x != nil {
		return x.FillDimmerA
	}
	return 0
}

// ExternalModelProto represents a new or updated 3D model
type ExternalModelProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of this 3D model instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The file name for this 3D model.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The anchor id for the closest spatial anchor when this 3D model was created.
	AnchorId string `protobuf:"bytes,3,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
	// The current transform of this 3D model relative to the provided spatial anchor.
	Transform *TransformProto `protobuf:"bytes,6,opt,name=transform,proto3" json:"transform,omitempty"`
	// The last user identifier to modify this 3D model.
	ModifiedByUserName string `protobuf:"bytes,5,opt,name=modified_by_user_name,json=modifiedByUserName,proto3" json:"modified_by_user_name,omitempty"`
}

func (x *ExternalModelProto) Reset() {
	*x = ExternalModelProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalModelProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalModelProto) ProtoMessage() {}

func (x *ExternalModelProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalModelProto.ProtoReflect.Descriptor instead.
func (*ExternalModelProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{11}
}

func (x *ExternalModelProto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalModelProto) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ExternalModelProto) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

func (x *ExternalModelProto) GetTransform() *TransformProto {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *ExternalModelProto) GetModifiedByUserName() string {
	if x != nil {
		return x.ModifiedByUserName
	}
	return ""
}

// RegisterDeviceRequest contains the initialization data for a device registering for updates with the server
type RegisterDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user identifier
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The version string for the client
	AppVersion string `protobuf:"bytes,2,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (x *RegisterDeviceRequest) Reset() {
	*x = RegisterDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceRequest) ProtoMessage() {}

func (x *RegisterDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterDeviceRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegisterDeviceRequest) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

// BrushStrokeAddRequest represents a single brush stroke to be added or modified
type BrushStrokeAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrushStroke *BrushStrokeProto `protobuf:"bytes,1,opt,name=brush_stroke,json=brushStroke,proto3" json:"brush_stroke,omitempty"`
}

func (x *BrushStrokeAddRequest) Reset() {
	*x = BrushStrokeAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrushStrokeAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrushStrokeAddRequest) ProtoMessage() {}

func (x *BrushStrokeAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrushStrokeAddRequest.ProtoReflect.Descriptor instead.
func (*BrushStrokeAddRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{13}
}

func (x *BrushStrokeAddRequest) GetBrushStroke() *BrushStrokeProto {
	if x != nil {
		return x.BrushStroke
	}
	return nil
}

// BrushStrokeRemoveRequest identifies a single brush stroke to be removed
type BrushStrokeRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AnchorId string `protobuf:"bytes,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
}

func (x *BrushStrokeRemoveRequest) Reset() {
	*x = BrushStrokeRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrushStrokeRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrushStrokeRemoveRequest) ProtoMessage() {}

func (x *BrushStrokeRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrushStrokeRemoveRequest.ProtoReflect.Descriptor instead.
func (*BrushStrokeRemoveRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{14}
}

func (x *BrushStrokeRemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BrushStrokeRemoveRequest) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

// ExternalModelAddRequest represents a single 3D model to be added or modified
type ExternalModelAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model *ExternalModelProto `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *ExternalModelAddRequest) Reset() {
	*x = ExternalModelAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalModelAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalModelAddRequest) ProtoMessage() {}

func (x *ExternalModelAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalModelAddRequest.ProtoReflect.Descriptor instead.
func (*ExternalModelAddRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{15}
}

func (x *ExternalModelAddRequest) GetModel() *ExternalModelProto {
	if x != nil {
		return x.Model
	}
	return nil
}

// ExternalModelRemoveRequest identifies a single 3D model to be removed
type ExternalModelRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AnchorId string `protobuf:"bytes,2,opt,name=anchor_id,json=anchorId,proto3" json:"anchor_id,omitempty"`
}

func (x *ExternalModelRemoveRequest) Reset() {
	*x = ExternalModelRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalModelRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalModelRemoveRequest) ProtoMessage() {}

func (x *ExternalModelRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalModelRemoveRequest.ProtoReflect.Descriptor instead.
func (*ExternalModelRemoveRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{16}
}

func (x *ExternalModelRemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalModelRemoveRequest) GetAnchorId() string {
	if x != nil {
		return x.AnchorId
	}
	return ""
}

// QueryUsersRequest contains request parameters for an rpc to list users connected to the server
type QueryUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryUsersRequest) Reset() {
	*x = QueryUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsersRequest) ProtoMessage() {}

func (x *QueryUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsersRequest.ProtoReflect.Descriptor instead.
func (*QueryUsersRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{17}
}

// QueryUsersResponse contains the results list for currently connected users.
type QueryUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of users connected to the server.
	Results []*QueryUsersResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QueryUsersResponse) Reset() {
	*x = QueryUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsersResponse) ProtoMessage() {}

func (x *QueryUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsersResponse.ProtoReflect.Descriptor instead.
func (*QueryUsersResponse) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{18}
}

func (x *QueryUsersResponse) GetResults() []*QueryUsersResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// ServerInfoProto contians information about the server
type ServerInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version string for the server
	ServerVersion string `protobuf:"bytes,1,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	// The minimum version string required for connecting to this server.
	MinAppVersion string `protobuf:"bytes,2,opt,name=min_app_version,json=minAppVersion,proto3" json:"min_app_version,omitempty"`
}

func (x *ServerInfoProto) Reset() {
	*x = ServerInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoProto) ProtoMessage() {}

func (x *ServerInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoProto.ProtoReflect.Descriptor instead.
func (*ServerInfoProto) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{19}
}

func (x *ServerInfoProto) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *ServerInfoProto) GetMinAppVersion() string {
	if x != nil {
		return x.MinAppVersion
	}
	return ""
}

// ServerStateResponse contains a single response from the server containing state updates.
type ServerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional list of user states that have changed since last update
	UserState []*UserStateProto `protobuf:"bytes,1,rep,name=user_state,json=userState,proto3" json:"user_state,omitempty"`
	// Optional list of brush strokes that have been added or modified since last update.
	BrushStrokeAdd []*BrushStrokeAddRequest `protobuf:"bytes,2,rep,name=brush_stroke_add,json=brushStrokeAdd,proto3" json:"brush_stroke_add,omitempty"`
	// Optional list of brush strokes that have been removed since last update.
	BrushStrokeRemove []*BrushStrokeRemoveRequest `protobuf:"bytes,3,rep,name=brush_stroke_remove,json=brushStrokeRemove,proto3" json:"brush_stroke_remove,omitempty"`
	// Optional list of 3D models that have been added or modified since last update.
	ExternalModelAdd []*ExternalModelAddRequest `protobuf:"bytes,4,rep,name=external_model_add,json=externalModelAdd,proto3" json:"external_model_add,omitempty"`
	// Optional list of 3D models that have been removed since last update.
	ExternalModelRemove []*ExternalModelRemoveRequest `protobuf:"bytes,5,rep,name=external_model_remove,json=externalModelRemove,proto3" json:"external_model_remove,omitempty"`
	// Optional information about the server
	ServerInfo *ServerInfoProto `protobuf:"bytes,6,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
}

func (x *ServerStateResponse) Reset() {
	*x = ServerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStateResponse) ProtoMessage() {}

func (x *ServerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStateResponse.ProtoReflect.Descriptor instead.
func (*ServerStateResponse) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{20}
}

func (x *ServerStateResponse) GetUserState() []*UserStateProto {
	if x != nil {
		return x.UserState
	}
	return nil
}

func (x *ServerStateResponse) GetBrushStrokeAdd() []*BrushStrokeAddRequest {
	if x != nil {
		return x.BrushStrokeAdd
	}
	return nil
}

func (x *ServerStateResponse) GetBrushStrokeRemove() []*BrushStrokeRemoveRequest {
	if x != nil {
		return x.BrushStrokeRemove
	}
	return nil
}

func (x *ServerStateResponse) GetExternalModelAdd() []*ExternalModelAddRequest {
	if x != nil {
		return x.ExternalModelAdd
	}
	return nil
}

func (x *ServerStateResponse) GetExternalModelRemove() []*ExternalModelRemoveRequest {
	if x != nil {
		return x.ExternalModelRemove
	}
	return nil
}

func (x *ServerStateResponse) GetServerInfo() *ServerInfoProto {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

// UpdateDeviceRequest contains a single state update from a connected client
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional updates to the users state if changed since last update.
	UserState *UserStateProto `protobuf:"bytes,1,opt,name=user_state,json=userState,proto3" json:"user_state,omitempty"`
	// Optional updates to the users localized space if changed since last update.
	SpaceInfo *SpaceInfoProto `protobuf:"bytes,2,opt,name=space_info,json=spaceInfo,proto3" json:"space_info,omitempty"`
	// Whether the client requests echoing of changes it makes (e.g. to test server round trips)
	Echo bool `protobuf:"varint,3,opt,name=echo,proto3" json:"echo,omitempty"`
	// Optional information about a brush stroke information that was added or updated since last update.
	BrushStrokeAdd *BrushStrokeAddRequest `protobuf:"bytes,4,opt,name=brush_stroke_add,json=brushStrokeAdd,proto3" json:"brush_stroke_add,omitempty"`
	// Optional brush stroke information for a brush stroke that was removed since last update.
	BrushStrokeRemove *BrushStrokeRemoveRequest `protobuf:"bytes,5,opt,name=brush_stroke_remove,json=brushStrokeRemove,proto3" json:"brush_stroke_remove,omitempty"`
	// Optional information about a 3D model that was added or updated since last update.
	ExternalModelAdd *ExternalModelAddRequest `protobuf:"bytes,7,opt,name=external_model_add,json=externalModelAdd,proto3" json:"external_model_add,omitempty"`
	// Optional 3D model information for a 3D model that was removed since last update.
	ExternalModelRemove *ExternalModelRemoveRequest `protobuf:"bytes,8,opt,name=external_model_remove,json=externalModelRemove,proto3" json:"external_model_remove,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDeviceRequest) GetUserState() *UserStateProto {
	if x != nil {
		return x.UserState
	}
	return nil
}

func (x *UpdateDeviceRequest) GetSpaceInfo() *SpaceInfoProto {
	if x != nil {
		return x.SpaceInfo
	}
	return nil
}

func (x *UpdateDeviceRequest) GetEcho() bool {
	if x != nil {
		return x.Echo
	}
	return false
}

func (x *UpdateDeviceRequest) GetBrushStrokeAdd() *BrushStrokeAddRequest {
	if x != nil {
		return x.BrushStrokeAdd
	}
	return nil
}

func (x *UpdateDeviceRequest) GetBrushStrokeRemove() *BrushStrokeRemoveRequest {
	if x != nil {
		return x.BrushStrokeRemove
	}
	return nil
}

func (x *UpdateDeviceRequest) GetExternalModelAdd() *ExternalModelAddRequest {
	if x != nil {
		return x.ExternalModelAdd
	}
	return nil
}

func (x *UpdateDeviceRequest) GetExternalModelRemove() *ExternalModelRemoveRequest {
	if x != nil {
		return x.ExternalModelRemove
	}
	return nil
}

// UpdateDeviceResponse contains the response for an UpdateDeviceRequest. Server updates are sent back via the
// RegisterAndListen api instead.
type UpdateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{22}
}

// RpcRequest contains a single generic RPC sent from a client
type RpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user identifier for the user sending the request.
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Optional query for the list of connected users.
	QueryUsersRequest *QueryUsersRequest `protobuf:"bytes,2,opt,name=query_users_request,json=queryUsersRequest,proto3" json:"query_users_request,omitempty"`
}

func (x *RpcRequest) Reset() {
	*x = RpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcRequest) ProtoMessage() {}

func (x *RpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcRequest.ProtoReflect.Descriptor instead.
func (*RpcRequest) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{23}
}

func (x *RpcRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RpcRequest) GetQueryUsersRequest() *QueryUsersRequest {
	if x != nil {
		return x.QueryUsersRequest
	}
	return nil
}

// RpcResponse contains the response for the generic Rpc api
type RpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional response to the QueryUsersRequest if provided in RpcRequest
	QueryUsersResponse *QueryUsersResponse `protobuf:"bytes,1,opt,name=query_users_response,json=queryUsersResponse,proto3" json:"query_users_response,omitempty"`
}

func (x *RpcResponse) Reset() {
	*x = RpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponse) ProtoMessage() {}

func (x *RpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponse.ProtoReflect.Descriptor instead.
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{24}
}

func (x *RpcResponse) GetQueryUsersResponse() *QueryUsersResponse {
	if x != nil {
		return x.QueryUsersResponse
	}
	return nil
}

type QueryUsersResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User identifier
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// The space information for this user.
	SpaceInfo *SpaceInfoProto `protobuf:"bytes,2,opt,name=space_info,json=spaceInfo,proto3" json:"space_info,omitempty"`
	// The display name for this user.
	UserDisplayName string `protobuf:"bytes,3,opt,name=user_display_name,json=userDisplayName,proto3" json:"user_display_name,omitempty"`
	// The device type for this user.
	DeviceType *UserStateProto_DeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=leapbrush.UserStateProto_DeviceType,oneof" json:"device_type,omitempty"`
}

func (x *QueryUsersResponse_Result) Reset() {
	*x = QueryUsersResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leap_brush_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUsersResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsersResponse_Result) ProtoMessage() {}

func (x *QueryUsersResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_leap_brush_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsersResponse_Result.ProtoReflect.Descriptor instead.
func (*QueryUsersResponse_Result) Descriptor() ([]byte, []int) {
	return file_leap_brush_api_proto_rawDescGZIP(), []int{18, 0}
}

func (x *QueryUsersResponse_Result) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueryUsersResponse_Result) GetSpaceInfo() *SpaceInfoProto {
	if x != nil {
		return x.SpaceInfo
	}
	return nil
}

func (x *QueryUsersResponse_Result) GetUserDisplayName() string {
	if x != nil {
		return x.UserDisplayName
	}
	return ""
}

func (x *QueryUsersResponse_Result) GetDeviceType() UserStateProto_DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return UserStateProto_DESKTOP_SPECTATOR
}

var File_leap_brush_api_proto protoreflect.FileDescriptor

var file_leap_brush_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x22, 0x38, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x49, 0x0a, 0x0f, 0x51,
	0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0x78, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x61,
	0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xac, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x61,
	0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65,
	0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5a, 0x12, 0x36, 0x0a,
	0x0a, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68,
	0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c,
	0x50, 0x6f, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x72, 0x75, 0x73, 0x68, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x09, 0x72, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf8, 0x06, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x65,
	0x66, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x72, 0x75, 0x73, 0x68, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x67, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x04, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x22, 0x50, 0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x41,
	0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x55, 0x53, 0x48, 0x5f, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x55,
	0x53, 0x48, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x10, 0x04, 0x22, 0x33, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x4b, 0x54,
	0x4f, 0x50, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x41, 0x50, 0x10, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x22, 0x47, 0x0a, 0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x13,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x61, 0x70,
	0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x22, 0x2a, 0x0a, 0x0b,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x01, 0x22, 0x88, 0x03, 0x0a, 0x10, 0x42, 0x72, 0x75,
	0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x72, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75,
	0x73, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x67, 0x62, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x67, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x72, 0x67, 0x62, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x67, 0x62, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x41, 0x22, 0x23,
	0x0a, 0x09, 0x42, 0x72, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4c,
	0x59, 0x10, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x15, 0x42, 0x72, 0x75, 0x73, 0x68,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75,
	0x73, 0x68, 0x2e, 0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x62, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x22, 0x47, 0x0a, 0x18, 0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x17, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x49, 0x0a, 0x1a, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0xe7, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x03, 0x0a,
	0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x72, 0x75, 0x73, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x62, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62,
	0x72, 0x75, 0x73, 0x68, 0x2e, 0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x12, 0x53, 0x0a, 0x13, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x2e, 0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x50, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x64,
	0x64, 0x12, 0x59, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xeb, 0x03, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x72, 0x75,
	0x73, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e,
	0x42, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x62, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x64, 0x64, 0x12, 0x53, 0x0a, 0x13, 0x62, 0x72, 0x75, 0x73, 0x68, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x42,
	0x72, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x62, 0x72, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75,
	0x73, 0x68, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x59, 0x0a, 0x15,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65,
	0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x77, 0x0a, 0x0a, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72,
	0x75, 0x73, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0b, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73,
	0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfc, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x61,
	0x70, 0x42, 0x72, 0x75, 0x73, 0x68, 0x41, 0x70, 0x69, 0x12, 0x59, 0x0a, 0x11, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x20,
	0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x61,
	0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x61,
	0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x36, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x15, 0x2e, 0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75,
	0x73, 0x68, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6c, 0x65, 0x61, 0x70, 0x62, 0x72, 0x75, 0x73, 0x68, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x48, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x70, 0x2e, 0x69, 0x6f, 0x2f, 0x67,
	0x68, 0x61, 0x7a, 0x65, 0x6e, 0x2f, 0x6c, 0x65, 0x61, 0x70, 0x2d, 0x62, 0x72, 0x75, 0x73, 0x68,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x13, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x70, 0x2e, 0x4c, 0x65, 0x61, 0x70, 0x42, 0x72, 0x75, 0x73,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_leap_brush_api_proto_rawDescOnce sync.Once
	file_leap_brush_api_proto_rawDescData = file_leap_brush_api_proto_rawDesc
)

func file_leap_brush_api_proto_rawDescGZIP() []byte {
	file_leap_brush_api_proto_rawDescOnce.Do(func() {
		file_leap_brush_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_leap_brush_api_proto_rawDescData)
	})
	return file_leap_brush_api_proto_rawDescData
}

var file_leap_brush_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_leap_brush_api_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_leap_brush_api_proto_goTypes = []interface{}{
	(BatteryStatusProto_BatteryState)(0), // 0: leapbrush.BatteryStatusProto.BatteryState
	(UserStateProto_ToolState)(0),        // 1: leapbrush.UserStateProto.ToolState
	(UserStateProto_DeviceType)(0),       // 2: leapbrush.UserStateProto.DeviceType
	(SpaceInfoProto_MappingMode)(0),      // 3: leapbrush.SpaceInfoProto.MappingMode
	(BrushStrokeProto_BrushType)(0),      // 4: leapbrush.BrushStrokeProto.BrushType
	(*Vector3Proto)(nil),                 // 5: leapbrush.Vector3Proto
	(*QuaternionProto)(nil),              // 6: leapbrush.QuaternionProto
	(*PoseProto)(nil),                    // 7: leapbrush.PoseProto
	(*TransformProto)(nil),               // 8: leapbrush.TransformProto
	(*BatteryStatusProto)(nil),           // 9: leapbrush.BatteryStatusProto
	(*ControllerStateProto)(nil),         // 10: leapbrush.ControllerStateProto
	(*HandStateProto)(nil),               // 11: leapbrush.HandStateProto
	(*UserStateProto)(nil),               // 12: leapbrush.UserStateProto
	(*AnchorProto)(nil),                  // 13: leapbrush.AnchorProto
	(*SpaceInfoProto)(nil),               // 14: leapbrush.SpaceInfoProto
	(*BrushStrokeProto)(nil),             // 15: leapbrush.BrushStrokeProto
	(*ExternalModelProto)(nil),           // 16: leapbrush.ExternalModelProto
	(*RegisterDeviceRequest)(nil),        // 17: leapbrush.RegisterDeviceRequest
	(*BrushStrokeAddRequest)(nil),        // 18: leapbrush.BrushStrokeAddRequest
	(*BrushStrokeRemoveRequest)(nil),     // 19: leapbrush.BrushStrokeRemoveRequest
	(*ExternalModelAddRequest)(nil),      // 20: leapbrush.ExternalModelAddRequest
	(*ExternalModelRemoveRequest)(nil),   // 21: leapbrush.ExternalModelRemoveRequest
	(*QueryUsersRequest)(nil),            // 22: leapbrush.QueryUsersRequest
	(*QueryUsersResponse)(nil),           // 23: leapbrush.QueryUsersResponse
	(*ServerInfoProto)(nil),              // 24: leapbrush.ServerInfoProto
	(*ServerStateResponse)(nil),          // 25: leapbrush.ServerStateResponse
	(*UpdateDeviceRequest)(nil),          // 26: leapbrush.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),         // 27: leapbrush.UpdateDeviceResponse
	(*RpcRequest)(nil),                   // 28: leapbrush.RpcRequest
	(*RpcResponse)(nil),                  // 29: leapbrush.RpcResponse
	(*QueryUsersResponse_Result)(nil),    // 30: leapbrush.QueryUsersResponse.Result
}
var file_leap_brush_api_proto_depIdxs = []int32{
	5,  // 0: leapbrush.PoseProto.position:type_name -> leapbrush.Vector3Proto
	6,  // 1: leapbrush.PoseProto.rotation:type_name -> leapbrush.QuaternionProto
	5,  // 2: leapbrush.TransformProto.position:type_name -> leapbrush.Vector3Proto
	6,  // 3: leapbrush.TransformProto.rotation:type_name -> leapbrush.QuaternionProto
	5,  // 4: leapbrush.TransformProto.scale:type_name -> leapbrush.Vector3Proto
	0,  // 5: leapbrush.BatteryStatusProto.state:type_name -> leapbrush.BatteryStatusProto.BatteryState
	7,  // 6: leapbrush.ControllerStateProto.pose:type_name -> leapbrush.PoseProto
	5,  // 7: leapbrush.ControllerStateProto.ray_points:type_name -> leapbrush.Vector3Proto
	7,  // 8: leapbrush.HandStateProto.tool_pose:type_name -> leapbrush.PoseProto
	5,  // 9: leapbrush.HandStateProto.ray_points:type_name -> leapbrush.Vector3Proto
	7,  // 10: leapbrush.UserStateProto.head_pose:type_name -> leapbrush.PoseProto
	10, // 11: leapbrush.UserStateProto.controller_state:type_name -> leapbrush.ControllerStateProto
	11, // 12: leapbrush.UserStateProto.left_hand_state:type_name -> leapbrush.HandStateProto
	11, // 13: leapbrush.UserStateProto.right_hand_state:type_name -> leapbrush.HandStateProto
	1,  // 14: leapbrush.UserStateProto.tool_state:type_name -> leapbrush.UserStateProto.ToolState
	2,  // 15: leapbrush.UserStateProto.device_type:type_name -> leapbrush.UserStateProto.DeviceType
	9,  // 16: leapbrush.UserStateProto.headset_battery:type_name -> leapbrush.BatteryStatusProto
	7,  // 17: leapbrush.AnchorProto.pose:type_name -> leapbrush.PoseProto
	13, // 18: leapbrush.SpaceInfoProto.anchor:type_name -> leapbrush.AnchorProto
	7,  // 19: leapbrush.SpaceInfoProto.target_space_origin:type_name -> leapbrush.PoseProto
	3,  // 20: leapbrush.SpaceInfoProto.mapping_mode:type_name -> leapbrush.SpaceInfoProto.MappingMode
	4,  // 21: leapbrush.BrushStrokeProto.type:type_name -> leapbrush.BrushStrokeProto.BrushType
	7,  // 22: leapbrush.BrushStrokeProto.brush_pose:type_name -> leapbrush.PoseProto
	8,  // 23: leapbrush.ExternalModelProto.transform:type_name -> leapbrush.TransformProto
	15, // 24: leapbrush.BrushStrokeAddRequest.brush_stroke:type_name -> leapbrush.BrushStrokeProto
	16, // 25: leapbrush.ExternalModelAddRequest.model:type_name -> leapbrush.ExternalModelProto
	30, // 26: leapbrush.QueryUsersResponse.results:type_name -> leapbrush.QueryUsersResponse.Result
	12, // 27: leapbrush.ServerStateResponse.user_state:type_name -> leapbrush.UserStateProto
	18, // 28: leapbrush.ServerStateResponse.brush_stroke_add:type_name -> leapbrush.BrushStrokeAddRequest
	19, // 29: leapbrush.ServerStateResponse.brush_stroke_remove:type_name -> leapbrush.BrushStrokeRemoveRequest
	20, // 30: leapbrush.ServerStateResponse.external_model_add:type_name -> leapbrush.ExternalModelAddRequest
	21, // 31: leapbrush.ServerStateResponse.external_model_remove:type_name -> leapbrush.ExternalModelRemoveRequest
	24, // 32: leapbrush.ServerStateResponse.server_info:type_name -> leapbrush.ServerInfoProto
	12, // 33: leapbrush.UpdateDeviceRequest.user_state:type_name -> leapbrush.UserStateProto
	14, // 34: leapbrush.UpdateDeviceRequest.space_info:type_name -> leapbrush.SpaceInfoProto
	18, // 35: leapbrush.UpdateDeviceRequest.brush_stroke_add:type_name -> leapbrush.BrushStrokeAddRequest
	19, // 36: leapbrush.UpdateDeviceRequest.brush_stroke_remove:type_name -> leapbrush.BrushStrokeRemoveRequest
	20, // 37: leapbrush.UpdateDeviceRequest.external_model_add:type_name -> leapbrush.ExternalModelAddRequest
	21, // 38: leapbrush.UpdateDeviceRequest.external_model_remove:type_name -> leapbrush.ExternalModelRemoveRequest
	22, // 39: leapbrush.RpcRequest.query_users_request:type_name -> leapbrush.QueryUsersRequest
	23, // 40: leapbrush.RpcResponse.query_users_response:type_name -> leapbrush.QueryUsersResponse
	14, // 41: leapbrush.QueryUsersResponse.Result.space_info:type_name -> leapbrush.SpaceInfoProto
	2,  // 42: leapbrush.QueryUsersResponse.Result.device_type:type_name -> leapbrush.UserStateProto.DeviceType
	17, // 43: leapbrush.LeapBrushApi.RegisterAndListen:input_type -> leapbrush.RegisterDeviceRequest
	26, // 44: leapbrush.LeapBrushApi.UpdateDeviceStream:input_type -> leapbrush.UpdateDeviceRequest
	28, // 45: leapbrush.LeapBrushApi.Rpc:input_type -> leapbrush.RpcRequest
	25, // 46: leapbrush.LeapBrushApi.RegisterAndListen:output_type -> leapbrush.ServerStateResponse
	27, // 47: leapbrush.LeapBrushApi.UpdateDeviceStream:output_type -> leapbrush.UpdateDeviceResponse
	29, // 48: leapbrush.LeapBrushApi.Rpc:output_type -> leapbrush.RpcResponse
	46, // [46:49] is the sub-list for method output_type
	43, // [43:46] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_leap_brush_api_proto_init() }
func file_leap_brush_api_proto_init() {
	if File_leap_brush_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_leap_brush_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector3Proto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuaternionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryStatusProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerStateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandStateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrushStrokeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalModelProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrushStrokeAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrushStrokeRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalModelAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalModelRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leap_brush_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUsersResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_leap_brush_api_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_leap_brush_api_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leap_brush_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_leap_brush_api_proto_goTypes,
		DependencyIndexes: file_leap_brush_api_proto_depIdxs,
		EnumInfos:         file_leap_brush_api_proto_enumTypes,
		MessageInfos:      file_leap_brush_api_proto_msgTypes,
	}.Build()
	File_leap_brush_api_proto = out.File
	file_leap_brush_api_proto_rawDesc = nil
	file_leap_brush_api_proto_goTypes = nil
	file_leap_brush_api_proto_depIdxs = nil
}
