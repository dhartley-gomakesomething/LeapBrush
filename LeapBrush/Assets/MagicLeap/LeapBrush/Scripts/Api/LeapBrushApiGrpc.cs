// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: leap_brush_api.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MagicLeap.LeapBrush {
  /// <summary>
  /// LeapBrushApi contains the definition for the leap brush grpc service
  /// </summary>
  public static partial class LeapBrushApi
  {
    static readonly string __ServiceName = "leapbrush.LeapBrushApi";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.RegisterDeviceRequest> __Marshaller_leapbrush_RegisterDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.RegisterDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.ServerStateResponse> __Marshaller_leapbrush_ServerStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.ServerStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.UpdateDeviceRequest> __Marshaller_leapbrush_UpdateDeviceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.UpdateDeviceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.UpdateDeviceResponse> __Marshaller_leapbrush_UpdateDeviceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.UpdateDeviceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.RpcRequest> __Marshaller_leapbrush_RpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.RpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::MagicLeap.LeapBrush.RpcResponse> __Marshaller_leapbrush_RpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MagicLeap.LeapBrush.RpcResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MagicLeap.LeapBrush.RegisterDeviceRequest, global::MagicLeap.LeapBrush.ServerStateResponse> __Method_RegisterAndListen = new grpc::Method<global::MagicLeap.LeapBrush.RegisterDeviceRequest, global::MagicLeap.LeapBrush.ServerStateResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RegisterAndListen",
        __Marshaller_leapbrush_RegisterDeviceRequest,
        __Marshaller_leapbrush_ServerStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MagicLeap.LeapBrush.UpdateDeviceRequest, global::MagicLeap.LeapBrush.UpdateDeviceResponse> __Method_UpdateDeviceStream = new grpc::Method<global::MagicLeap.LeapBrush.UpdateDeviceRequest, global::MagicLeap.LeapBrush.UpdateDeviceResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UpdateDeviceStream",
        __Marshaller_leapbrush_UpdateDeviceRequest,
        __Marshaller_leapbrush_UpdateDeviceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::MagicLeap.LeapBrush.RpcRequest, global::MagicLeap.LeapBrush.RpcResponse> __Method_Rpc = new grpc::Method<global::MagicLeap.LeapBrush.RpcRequest, global::MagicLeap.LeapBrush.RpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rpc",
        __Marshaller_leapbrush_RpcRequest,
        __Marshaller_leapbrush_RpcResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MagicLeap.LeapBrush.LeapBrushApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LeapBrushApi</summary>
    [grpc::BindServiceMethod(typeof(LeapBrushApi), "BindService")]
    public abstract partial class LeapBrushApiBase
    {
      /// <summary>
      /// Rpc to register with the server and listen for a stream of server state updates. This rpc remains streaming
      /// for the duration of the client's connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RegisterAndListen(global::MagicLeap.LeapBrush.RegisterDeviceRequest request, grpc::IServerStreamWriter<global::MagicLeap.LeapBrush.ServerStateResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rpc to send a stream of updates from the device to the server. This rpc remains streaming for the duration
      /// of the client's connection.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MagicLeap.LeapBrush.UpdateDeviceResponse> UpdateDeviceStream(grpc::IAsyncStreamReader<global::MagicLeap.LeapBrush.UpdateDeviceRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generic rpc request from the client.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::MagicLeap.LeapBrush.RpcResponse> Rpc(global::MagicLeap.LeapBrush.RpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LeapBrushApi</summary>
    public partial class LeapBrushApiClient : grpc::ClientBase<LeapBrushApiClient>
    {
      /// <summary>Creates a new client for LeapBrushApi</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public LeapBrushApiClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LeapBrushApi that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public LeapBrushApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected LeapBrushApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected LeapBrushApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Rpc to register with the server and listen for a stream of server state updates. This rpc remains streaming
      /// for the duration of the client's connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::MagicLeap.LeapBrush.ServerStateResponse> RegisterAndListen(global::MagicLeap.LeapBrush.RegisterDeviceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAndListen(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rpc to register with the server and listen for a stream of server state updates. This rpc remains streaming
      /// for the duration of the client's connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::MagicLeap.LeapBrush.ServerStateResponse> RegisterAndListen(global::MagicLeap.LeapBrush.RegisterDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RegisterAndListen, null, options, request);
      }
      /// <summary>
      /// Rpc to send a stream of updates from the device to the server. This rpc remains streaming for the duration
      /// of the client's connection.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::MagicLeap.LeapBrush.UpdateDeviceRequest, global::MagicLeap.LeapBrush.UpdateDeviceResponse> UpdateDeviceStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rpc to send a stream of updates from the device to the server. This rpc remains streaming for the duration
      /// of the client's connection.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::MagicLeap.LeapBrush.UpdateDeviceRequest, global::MagicLeap.LeapBrush.UpdateDeviceResponse> UpdateDeviceStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_UpdateDeviceStream, null, options);
      }
      /// <summary>
      /// Generic rpc request from the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MagicLeap.LeapBrush.RpcResponse Rpc(global::MagicLeap.LeapBrush.RpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Rpc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generic rpc request from the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::MagicLeap.LeapBrush.RpcResponse Rpc(global::MagicLeap.LeapBrush.RpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rpc, null, options, request);
      }
      /// <summary>
      /// Generic rpc request from the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MagicLeap.LeapBrush.RpcResponse> RpcAsync(global::MagicLeap.LeapBrush.RpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RpcAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generic rpc request from the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::MagicLeap.LeapBrush.RpcResponse> RpcAsync(global::MagicLeap.LeapBrush.RpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rpc, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override LeapBrushApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LeapBrushApiClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(LeapBrushApiBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterAndListen, serviceImpl.RegisterAndListen)
          .AddMethod(__Method_UpdateDeviceStream, serviceImpl.UpdateDeviceStream)
          .AddMethod(__Method_Rpc, serviceImpl.Rpc).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LeapBrushApiBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterAndListen, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::MagicLeap.LeapBrush.RegisterDeviceRequest, global::MagicLeap.LeapBrush.ServerStateResponse>(serviceImpl.RegisterAndListen));
      serviceBinder.AddMethod(__Method_UpdateDeviceStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::MagicLeap.LeapBrush.UpdateDeviceRequest, global::MagicLeap.LeapBrush.UpdateDeviceResponse>(serviceImpl.UpdateDeviceStream));
      serviceBinder.AddMethod(__Method_Rpc, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MagicLeap.LeapBrush.RpcRequest, global::MagicLeap.LeapBrush.RpcResponse>(serviceImpl.Rpc));
    }

  }
}
#endregion
